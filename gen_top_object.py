#!/usr/bin/python3
# Copyright Hengfeng.zhang
# soc top rtl integration
# the module ports in one more module will be connected
# the module ports only in one module will be exported
# the ports and signals will commented with its connection for review
# 20200925, initial this script


import os
import sys

from bo.module import Module
from bo.port import PortInfos

def removeLast(content, pat):
    idx = content.rindex(pat)
    return content[0:idx] + content[idx + 1:len(content)]

if __name__ == '__main__':

    print('-----Connector Generator Begin-------')
    # open the design file
    try:
        top = sys.argv[1]
        file_group = sys.argv[2:]
    except Exception:
        raise Exception("Error: gen_tb.py need some design.v ")

    # define the generated file
    inst = 'inst.tmp'
    directory = os.getcwd()
    inst_path = directory + '/' + inst
    top_path = directory + '/' + top

    # remove tmp
    if os.path.exists(inst_path):
        os.remove(inst_path)

    if os.path.exists(top_path):
        os.remove(top_path)

    # read module info from input files
    with open(inst_path, 'a') as instance_group:
        modules = []
        for file_design in file_group:
            file_path = directory + '/' + file_design
            module_tmp = Module(file_path)
            if module_tmp.isValid():
                modules.append(module_tmp)

    # collect ports
    portInfos = PortInfos()
    for module in modules:
        portInfos.add(module)

    # Write signals declartion
    with open(top_path, 'a') as top_group:
        top_group.write('/*------------------------------------------------------------------\n')
        top_group.write('//The design file is generated by gen_top.py\n')
        top_group.write('//The design file including:\n')
        for file_design in file_group:
            top_group.write('//--' + file_design + ';\n')
        top_group.write('-------------------------------------------------------------------*/\n\n')

        top_group.write('module top (\n')

        valids = [p for p in portInfos.port_infos.values() if p.isValid()]
        signals = [p for p in valids if not p.isWire()]
        wires = [p for p in valids if p.isWire()]
        content = ""
        for signal in signals:
            content += signal.getInfo() + " " + signal.getComment() + "\n"

        top_group.write(removeLast(content, ","))
        top_group.write(");\n\n")

        for wire in wires:
            top_group.write(wire.getInfo() + " " + wire.getComment() + "\n")

        for module in modules:
            content = ""
            content += module.getInfo()
            top_group.write(removeLast(content, ","))

        top_group.write("\nendmodule")


